Three steps for deletion-
1. Swap the first node with last node;
2. Remove the last node;
3. Propogate root node to its correct position;
       
                                      CODE
                                    
   # include<bits/stdc++.h>
using namespace std;
class heap {
    public:
    int arr[100];
    int size;
    
    heap(){
        arr[0] = -1;
        size =0;
    }
        void insertion(int val){
            size = size + 1;
           int index = size;
            arr[index]=val;
            while(index>1){
               int parent = index/2;
               if(arr[parent]<arr[index]){
                   swap(arr[parent], arr[index]);
                   index = parent;
               }
            else{
                return;
            }
            }
            }
            void deletion(){
                if(size==0){
                    cout<<"Nothing to delete"<<endl;
                }
            arr[1]=arr[size];
            size--;
            int i =1;
            while(i<size){
                int leftofnode = 2*i;
                int rightofnode = 2*i + 1;
                if(leftofnode<size && arr[i]<arr[leftofnode]){
                    swap(arr[i], arr[leftofnode]);
                    i = leftofnode;
                }
                else if(rightofnode<size && arr[i]<arr[rightofnode]){
                    swap(arr[i], arr[rightofnode]);
                    i=rightofnode;
                }
                else{
                    return;
                }
            }
            }
            void print(){
            for(int i =1; i<=size; i++){
                cout<<arr[i]<<" ";
            }
            cout<<endl;
            }    
            
        };
        int main(){
            heap h;
            h.insertion(50);
            h.insertion(55);
            h.insertion(53);
            h.insertion(52);
            h.insertion(54);
            
            h.print();
            h.deletion();
            h.print();
            
        }
    
